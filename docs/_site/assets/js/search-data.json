{
  "1": {
    "id": "1",
    "title": "Attributes",
    "content": "Attributes There are a lot of attributes in the cookbook. To make management easier they have been split across several files. The following table shows these attributes, what they are used for and the file that can be found in. A lot of the attributes are derived from the host on which the cookbook is run, for example metadata from the Azure instance. This means that there are only a few that have to be set when testing or deploying the system. The ones that need to be specified are highlighted in the table. automate.rb Attribute Description Default Value Required camsa.automate.tokens Array of names of tokens that should be created in the Automate server [&#39;user_automate_token&#39;]   camsa.automate.kernel.&quot;vm.max_map_count&quot;   262144   camsa.automate.kernel.&quot;vm.dirty_expire_centisecs&quot;   20000   camsa.automate.download.channel Channel from which the Automate package should be downloaded current   camsa.automate.download.url The URL from which the package will be downloaded. This channel is substituted into the string at run time https://packages.chef.io/files/%s/automate/latest/chef-automate_linux_amd64.zip   camsa.automate.command.location Location of the chef-automate command once installed /usr/local/bin/chef-automate   camsa.automate.certs.cert Path to the deployment service certificate /hab/svc/deployment-service/data/deployment-service.crt   camsa.automate.certs.key Path to the deployment service certificate key /hab/svc/deployment-service/data/deployment-service.key   camsa.automate.certs.cacert Path to the Certificate Authority which signed the deployment service certificate /hab/svc/deployment-service/data/cacert.crt   camsa.automate.license The automate license. This can be supplied if a license has already been obtained. If not a trial one will be generated and assigned.     azure_functions.rb Attribute Description Default Value Required camsa.azure_functions.camsa.url URL to the functions that have been deployed as a part of CAMSA. This will be supplied by the ARM template ’’ * camsa.azure_functions.camsa.apikey ApiKey that belongs to the specified URL. This will be supplied by the ARM template ’’ * camsa.azure_functsion.central.url URL to the central functions for management. This will only be populated if deployed as a Managed Application ’’   camsa.azure_functions.central.apikey ApiKey for the specified central functions URL. This will only be populated if deployed as a Managed Application ’’   camsa.monitoring.automate.function.name Name of the function endpoint to use to send the Automate statistics. Will be supplied by the ARM template AutomateLog   chefserver.rb Attribute Description Default Value Required camsa.chefserver.user.statsd User that should be created for the Statsd service statsd   camsa.chefserver.npm.packages Hash table of packages that need to be installed to monitor the chef server statistics. See below for the packages. {}   The following table shows the NPM Packages that are installed, what they are for and the options being used. Package Name Version Option Description statsd 0.8.0 -g Statsd server to receive statistics from the the Chef Server azure-storage   -g Library to allow files to be uploaded to Azure Storage sprintf-js   -g Library to allow formatting of strings within Javascript clean.rb Attribute Description Default Value Required camsa.clean When testing it is useful to be able to delete the flags that are generated to make things idempotent. false   config_store.rb Attribute Description Default Value Required camsa.config_store.items.automate.automate_fqdn FQDN of the automate server. This is set by the template. node[‘fqdn]   camsa.config_store.items.automate.pip_automate_fqdn FQDN that is assigned to the Public IP in Azure. This will be retrieved by the default recipe     camsa.config_store.items.automate.automate_internal_ip Internal IP address of the automate server node[‘azure’][‘metadata’][‘network’][‘local_ipv4’][0]   camsa.config_store.items.chef.chef_fqdn FQDN of the chef server. This is set by the template. node[‘fqdn]   camsa.config_store.items.chef.pip_chef_fqdn FQDN that is assigned to the Public IP in Azure. This will be retrieved by the default recipe     camsa.config_store.items.chef.chef_internal_ip Internal IP address of the chef server node[‘azure’][‘metadata’][‘network’][‘local_ipv4’][0]   camsa.config_store.items.supermarket.supermarket_fqdn FQDN of the automate server. This is set by the template. node[‘fqdn]   camsa.config_store.items.supermarket.pip_supermarket_fqdn FQDN that is assigned to the Public IP in Azure. This will be retrieved by the default recipe     camsa.config_store.items.supermarket.supermarkete_internal_ip Internal IP address of the automate server node[‘azure’][‘metadata’][‘network’][‘local_ipv4’][0]   cron.rb Attribute Description Default Value Required camsa.cron.backup Cron string stating when the backup should be run 0 1 * * *   camsa.cron.certficate String stating when the certificate renew should occur 30 0 * * *   datadisks.rb Attribute Description Default Value Required camsa.datadisks.automate Array of hashes describing what device to format and where to mount it on the machine See below   Each hash in the array can have the following settings. The example values show the default for the automate datadisks. Name Description Value label Label to applied to the partition when it is formatted AutomateDisk fstype The type of file system ext4 device The device on which to create the partition /dev/sdc mount Where the device should be mounted /hab default.rb Attribute Description Default Value Required camsa.managed_app State if the deployment is managed or not. By default it is not. If set to true a check will be made to ensure it is authorised to be a managed app true   camsa.deploy.automate State if automate should be deployed or not true   camsa.deploy.chef State if chef should be deployed or not true   camsa.deploy.supermarket State if supermarket should be deployed or not true   camsa.debug Specify if extra information should be output in the logs false   camsa.firstname First name of the account to create on the Chef components   * camsa.lastname Last name of the account to create on the Chef components   * camsa.username Username of the account to create on the Chef components   * camsa.password Password to be set for the created account   * camsa.gdpr State if Chef is allowed to store your information. In the EU this is GDPR consent. false * camsa.chefserver.org.name Name of the organisation to be set on the Chef server   * camsa.chefserver.org.description Description of the organisation to be set on the Chef server   * camsa.tags See below     During deployment the ARM templates add tags to the instance. From the instance it is possible to obtain these tags and Chef makes them available through attributes. However they are not in an object format. For example if two tags were to be set on the instance, such as: { &quot;firstname&quot;: &quot;foo&quot;, &quot;lastname&quot;: &quot;bar&quot; } When referenced from the metadata this is presented as: firstname:foo;lastname:bar The default recipe splits this string up and sets it as an object in the node[&#39;camsa&#39;][&#39;tags&#39;] for easy reference. directories.rb Attribute Description Default Value Required camsa.dirs.working Base working directory for CAMSA /usr/local/camsa   camsa.dirs.bin Scripts and commands for CAMSA within the working dir #{node[&#39;camsa&#39;][&#39;dirs&#39;][&#39;working&#39;]}/bin   camsa.dirs.etc Configuration files #{node[&#39;camsa&#39;][&#39;dirs&#39;][&#39;working&#39;]}/etc   camsa.dirs.archive Location for files that are moved or replaced #{node[&#39;camsa&#39;][&#39;dirs&#39;][&#39;working&#39;]}/archive   camsa.dirs.flags Files used as semaphores to ensure that processes that are not inherently idempotent can be made to be #{node[&#39;camsa&#39;][&#39;dirs&#39;][&#39;working&#39;]}/flags   camsa.dirs.data Snippets of information required by the setup #{node[&#39;camsa&#39;][&#39;dirs&#39;][&#39;working&#39;]}/data   storage_account.rb Attribute Description Default Value Required camsa.storage_account.name Name of the storage account to be used to store backups   * camsa.storage_account.access_key Access key associated with the specified storage account   * camsa.storage_account.container_name Container within the storage account to upload files to   *",
    "url": "http://localhost:4000/docs/cookbooks/camsa/attributes/",
    "relUrl": "/docs/cookbooks/camsa/attributes/"
  },
  "2": {
    "id": "2",
    "title": "automate_dns",
    "content": "automate_dns This resource is responsible for attempting to register the servers with DNS if the application is deployed as a managed application. Syntax automate_dns &#39;name&#39; do verify_url String # URL to the central functions for CAMSA verify_apikey String # API Key associated with the specified URL license String # Automate license subscription_id String # The Azure subscription ID into which the application has been deployed firstname String # First name of the user lastname String # Last name of the user fqdn String # FQDN set on the machine fqdn_pip String # FQDN associated with the assigned Public IP address creates String # Path to file that is created when the registration is successful action Symbol # defaults to :run if not specified end where: automate_dns is the resource name is the name given to the resource block action identifies which steps chef-client will take to bring the nodes into the desired state verify_url, verify_apikey, license, subscription_id, firstname, lastname, fqdn, fqdn_pip and creates are properties available to this resource Actions The automate_dns resource has the following actions: :run - Attempts to call the central function to register the servers with DNS",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/automate_dns/",
    "relUrl": "/docs/cookbooks/camsa/libraries/automate_dns/"
  },
  "3": {
    "id": "3",
    "title": "automate_license",
    "content": "automate_license Once Automate is installed it can be called to create a new trial license if a valid full one has not been supplied. This resource handles this request. If a trial is required then it will call the local Automate server (which in turn calls the licensing API at Chef) to generate a license. This will be added to the node run_state so it can be used elsewhere in the cookbook. If a license has been supplied, it is applied to the Automate server and is assigned to the run state. Syntax automate_license &#39;name&#39; do url String # URL to the license status URL on the local server ssl_verify String # String used to denote if SSL verification is enabled. Default: none cert_file String # Path to the deployment service certificate file. See below. key_file String # Path to the deployment service cerificate key file. See below. cacert_file String # Path to the Certificate Authority used to sign the above certificate. See below/ license String # License string for Automate license_filename String # Path to the file on disk containing the license text trial_url String # URL to the local machine to request the license from. See below. first_name String # First name of the user requesting the license last_name String # Last name of the user requesting the license email String # Email address associated with the specified user gdpr_agree String # Boolean stating if consent to GDPR action Symbol # defaults to :apply if not specified end where: automate_license is the resource name is the name given to the resource block action identifies which steps chef-client will take to bring the nodes into the desired state url, ssl_verify, cert_file, key_file, cacert_file, license, license_filename, trial_url, first_name, last_name, email and gdpr_agree are properties available to this resource Actions The automate_dns resource has the following actions: :apply - Attempt to apply the specified license or request a trial license Notes When communicating with the Automate server, it is done using a specific URL and SSL certificate files. These files are deployed by Automate when it is installed, however a specific host needs to be used when requesting license details. When the Automate server is deployed an entry is added to the /etc/hosts file thus: 127.0.0.1 automate-gateway By doing this the certificate files can be used to create a secure connection to the local server.",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/automate_license/",
    "relUrl": "/docs/cookbooks/camsa/libraries/automate_license/"
  },
  "4": {
    "id": "4",
    "title": "automate_monitoring.sh",
    "content": "automate_monitoring.sh Automate does not have the ability to send metrics directly to Azure Log Analytics, so a cron job is required that will read the metrics from the Automate server every 5 minutes. This data is then sent to a deployed Azure Function which takes this data and adds it to Log Analytics. By default this script will be written out to /usr/local/camsa/bin/automate_monitoring.sh and then scheduled on a cron by the backup recipe. Configuration As this is a template the settings for the script are injected directly into the script when Chef renders the file to disk. The following is a list of the settings that are applied to the script. Setting Description Example function_url URL to the function that will recieve the Automate data   apikey The apikey associated with the specified function   Raw Script The following is an example of the monitoring script. #!/usr/bin/env bash journalctl -fu chef-automate --since &quot;5 minutes ago&quot; --until &quot;now&quot; -o json &gt; /var/log/jsondump.json curl -H &quot;Content-Type: application/json&quot; -H &quot;x-functions-key: &lt;%= @apikey %&gt;&quot; -X POST -d @/var/log/jsondump.json &lt;%= @function_url %&gt;",
    "url": "http://localhost:4000/docs/cookbooks/camsa/templates/automate_monitoring/",
    "relUrl": "/docs/cookbooks/camsa/templates/automate_monitoring/"
  },
  "5": {
    "id": "5",
    "title": "automate_ssl",
    "content": "automate_ssl Resource responsible for patching the Automate server with the SSL certificate and key. This works in conjunction with a supplied certificate and Let’s Encrypt. It will create a patch file with the certificate and key and then run the chef-automate config patch &lt;FILE&gt; command to set the certificate on the Automate server. Syntax automate_license &#39;name&#39; do cert_path String # Path to the certificate file to read cert_key_path String # Path to the certificate key file to read patch_file String # The name of hte file to create the file to patch Automate with template String # Template file to use to create the patch file action Symbol # defaults to :run if not specified end where: automate_ssl is the resource name is the name given to the resource block action identifies which steps chef-client will take to bring the nodes into the desired state url, ssl_verify, cert_file, key_file, cacert_file, license, license_filename, trial_url, first_name, last_name, email and gdpr_agree are properties available to this resource Actions The automate_ssl resource has the following actions: :run - Run the patch operation to set the certificate and key on the Automate instance Defaults Property Default Value cert_path /etc/letsencrypt/live/%s/fullchain.pem cert_key_path /etc/letsencrypt/live/%s/privkey.pem patch_file /usr/local/camsa/etc/patch_ssl.toml template patch_ssl.toml The paths to the certificate and certificate key are patched with string formatting using the node[&#39;fqdn&#39;] attribute.",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/automate_ssl/",
    "relUrl": "/docs/cookbooks/camsa/libraries/automate_ssl/"
  },
  "6": {
    "id": "6",
    "title": "automate_token",
    "content": "automate_ssl In order to call Automate APIs a key is required. These can be generated by the chef-automate command. The setup system creates at least one token to allow access, however more can be created based on the attributes that are set. The semaphore file prevents a token being created that has already been assigned. Syntax automate_token &#39;name&#39; do creates String # Path to the semaphore file created when a successfully created action Symbol # defaults to :create if not specified end where: automate_ssl is the resource name is the name given to the resource block action identifies which steps chef-client will take to bring the nodes into the desired state creates are properties available to this resource Actions The automate_token resource has the following actions: :run - Call the chef-automate admin-token to create a token",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/automate_token/",
    "relUrl": "/docs/cookbooks/camsa/libraries/automate_token/"
  },
  "7": {
    "id": "7",
    "title": "automate_user",
    "content": "automate_user Creates the user in Automate using the information supplied in the attributes. This resource makes use of the make_request method in the camsa_base resource. Syntax automate_user &#39;name&#39; do firstname String # First name of the user to create lastname String # Last name of the user to create username String # Username of the user to create. If not sepcified the name will be used. password String # Password to be assigned to the account url String # URL to the users API in the local Automate instance ssl_verify String # One of peer or none to verify the API cert_file String # Certificate file to use to communicate with the API key_file String # Certificate key file to use to communicate with the API cacert_file String # Certificate authority used to create the certificate token String # Toekn to use to create the user with in Automate action Symbol # defaults to :create if not specified end where: automate_user is the resource name is the name given to the resource block action identifies which steps chef-client will take to bring the nodes into the desired state firstname, lastname, username, password, url, ssl_verify, cert_file, key_file, cacert_file and token are properties available to this resource Actions The automate_user resource has the following actions: :run - Attempt to create the user on the Automate server Defaults Property Default Value url https://127.0.0.1/api/v0/auth/users ssl_verify none cert_file /hab/svc/deployment-service/data/deployment-service.crtm key_file /hab/svc/deployment-service/data/deployment-service.key cacert_file /hab/svc/deployment-service/data/root.crt",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/automate_user/",
    "relUrl": "/docs/cookbooks/camsa/libraries/automate_user/"
  },
  "8": {
    "id": "8",
    "title": "automate_whitelist",
    "content": "automate_whitelist In order to be able to register with DNS and sent log information to the central Managed App subscription, the Automate license and subscription need to be verified. In order to do this a call is made to the whitelist function which returns a stats to state if this instance of CAMSA is whitelisted or not. This resource makes use of the make_request method in the camsa_base resource. Syntax automate_whitelist &#39;name&#39; do license String # Automate license string subscription_id String # Azure SUbscription ID of where the app has been deployed url String # URL to the central functions apikey String # ApiKey for the specified URL action Symbol # defaults to :run if not specified end where: automate_whitelist is the resource name is the name given to the resource block action identifies which steps chef-client will take to bring the nodes into the desired state license, license_filename, subscription_id, password, url and apikey are properties available to this resource Actions The automate_whitelist resource has the following actions: :run - Call central function to determine if app has been whitelisted Defaults Property Default Value license node.run_state[:automate][:license] subscription_id node[&#39;azure&#39;][&#39;metdata&#39;][&#39;compute&#39;][&#39;subscriptionId&#39;] url node[&#39;camsa&#39;][&#39;azure_functions&#39;][&#39;central&#39;][&#39;url&#39;] apikey node[&#39;camsa&#39;][&#39;azure_functions&#39;][&#39;central&#39;][&#39;url&#39;]",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/automate_whitelist/",
    "relUrl": "/docs/cookbooks/camsa/libraries/automate_whitelist/"
  },
  "9": {
    "id": "9",
    "title": "backup.sh",
    "content": "backup.sh Each of the components that are deployed within the CAMSA solution are backed up using this script. There are a number of parameters that can be passed to the script which determine what and how is backed up. These include settings that allow the backups to be copied to Azure blob storage. The backups are then removed from the local disk. Parameters The following table shows the parameters that are accepted by the script and any default values Name Description Default Value -c, –config Configuration file to use   -s, –chunk-size Size of the chunks to upload to Blob storage 256Mb -t, –type Type of backup to perform. One of automate   -w, –working-dir Working directory to use to temporaily store the backup files /tmp/backup -v, –api-version API version to use when uploading to blob storage 2018-03-28 Configuration The backup script accepts a configuration file which contains the storage account settings to be used for Blog storage upload. This is a simple key value pair configuration file. An example of this can be seen below: STORAGE_ACCOUNT=kjbn5646v CONTAINER_NAME=backup ACCESS_KEY=fa3032f1-5c96-4c67-97b0-4de15502d83c",
    "url": "http://localhost:4000/docs/cookbooks/camsa/files/backup/",
    "relUrl": "/docs/cookbooks/camsa/files/backup/"
  },
  "10": {
    "id": "10",
    "title": "backup_config.erb",
    "content": "backup_config.erb The backup script requires a configuration file so it can upload files to Azure Blog storage. This template file is written out to /usr/local/camsa/etc/backup_config by default and is populated from the attributes that are in the chef run. Configuration As this is a template the settings for the file are injected directly into the script when Chef renders the file to disk. The following is a list of the settings that are applied to the script. Setting Description Example sa_name Name of the storage account   container_name Name of the container to upload files to   access_key Access key to use to upload files   Raw file The following is an example of the backup configuration template STORAGE_ACCOUNT=&lt;%= @sa_name %&gt; CONTAINER_NAME=&lt;%= @container_name %&gt; ACCESS_KEY=&lt;%= @access_key %&gt;",
    "url": "http://localhost:4000/docs/cookbooks/camsa/templates/backup_config/",
    "relUrl": "/docs/cookbooks/camsa/templates/backup_config/"
  },
  "11": {
    "id": "11",
    "title": "_camsa_base",
    "content": "_camsa_base.rb As the name implies, this is a base library that is imported by the other usable libs in the cookbook. It is not intended to be called directly in other recipes. Most of the operations that need to be performed during the setup are HTTP requests. This base library contains methods that allow the configuration and the processing of the request. make_request Perform the HTTP request with the options specified. Parameters Name Description Example method HTTP method to used GET url URL to call http://chef.io status_codes Array of HTTP codes that are acceptable when determining if the operation was successful [200] options Hash table of options such as headers that need to be supplied in the HTTP call {}",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/camsa_base/",
    "relUrl": "/docs/cookbooks/camsa/libraries/camsa_base/"
  },
  "12": {
    "id": "12",
    "title": "camsa_certificate",
    "content": "camsa_certificate This resource will attempt to obtain an SSL certificate from the Let’s Encrypt service. It will install the certbot command and schedule a script to be run on a cron. This is to ensure that the certificate is always renewed. In order to correctly set this up the resource needs to be supplied with a start and stop command to stop and start necessary services when a certificate is renewed. THe cron schedule is set from the node[&#39;camsa&#39;][&#39;cron&#39;][&#39;certificate&#39;] attribute. Syntax camsa_certificate &#39;name&#39; do start_command String # Command to be run when services need to be started stop_command String # Command to use to stop the necessary commands fqdn String # FQDN to be applied to the certificate email_address String # EMail address to use when requesting the certificate schedule String # Cron schedule to use creates String # File to create to denote that th certificate has been created action Symbol # defaults to :run if not specified end where: camsa_certificate is the resource name is the name given to the resource block action identifies which steps chef-client will take to bring the nodes into the desired state start_command, stop_command, fqdn, email_address, schedule and creates are properties available to this resource Actions The camsa_certificate resource has the following actions: :run - Call central function to determine if app has been whitelisted Defaults Property Default Value creates /usr/local/camsa/flags/certificate.flag",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/camsa_certificate/",
    "relUrl": "/docs/cookbooks/camsa/libraries/camsa_certificate/"
  },
  "13": {
    "id": "13",
    "title": "camsa_config_store",
    "content": "During the setup of the servers when the managed app is deployed, a lot of information is generated that the client needs access to. Account passwords Server hostnames IP Addresses Tokens As has been noted, there are a few functions that are deployed as well and one of these functions accepts data into a configuration store over HTTPS. This custom resource allows the data to be sent to the function of choice. As this custom resource is in the common cookbook, a recipe from the cookbook should be used or a dependency set on it. Syntax camsa_config_store &#39;name&#39; do name String # Name of the key in config store. If not specified the resource name is used url String # URL to the azure functions for the deployment apikey String # ApiKey associated with the URL source_file String # File from which values to be added to the store should be read file_type_hint String # Hint for the resource to be able to read the data. It attempt to be determined automatically source Hash # Hash table of keys and values to add to the store http_method String # Method to be used when accessing the store prefix String # Prefix to be applied to the keys when added to the store separate Boolean # If several items are being sent specify to seperate them out action String # defaults to :run if not specified end where: config_store is the resource name is the name given to the resource block action identifies which steps the chef-client will take to bring the nodes into the desired state name, url, apikey, source_file, file_type_hint, source, http_method, prefix and separate are properties of this resource, with the ruby type shown. Actions The camsa_config_store resource has the following actions: :run - Add the information to the configuration store Defaults Property Default Value url node[&#39;camsa&#39;][&#39;azure_functions&#39;][&#39;camsa&#39;][&#39;url&#39;] apikey node[&#39;camsa&#39;][&#39;azure_functions&#39;][&#39;camsa&#39;][&#39;apikey&#39;] http_method POST source {} separate false",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/camsa_config_store/",
    "relUrl": "/docs/cookbooks/camsa/libraries/camsa_config_store/"
  },
  "14": {
    "id": "14",
    "title": "camsa_http",
    "content": "Although Chef contains a resource called http_request it is not easy to specify an alternative CA or certificates to use. Additionally it does not allow the response to be received and made available to other parts of the runlist. In order to request an Automate trial license (if a license has not been supplied) the SSL files for the local instance of Automate need to be supplied. The recipe also needs to be able to read the response back to get the license from it. The standard http_request resource does not allow this. This resource has been written to bypass these issues. When the resource is used, the response from the endpoint will be placed in the run state object based on the name of the resource. Thus if the resource was called foobar the response data would be in node.run_state[:web_response][&#39;foobar&#39;]. Syntax camsa_http &#39;name&#39; do url String # Url to access ssl_verify String # Whether or not to verify ssl certificates message Hash # Hash containing the body of the request to send to the Url headers Hash # A hash of any headers that need to be added to the request status_code Array # Array of integers for the status codes that are permissible content_type String # Content type to use cert_file String # Path to the certificate file key_file String # Path to the key associated with the specified certificate file cacert_file String # Path to the CA certificate file action Symbol # Action to run on the resource, default: get end where: camsa_http is the resource name is the name given to the resource block action identifies which steps the chef-client will take to bring the nodes into the desired state url, ssl_verify, message, headers, status_codes, content_type, cert_file, key_file and cacert_file are properties of this resource, with the ruby type shown. Actions The camsa_http resource has the following actions: :get - Perform an HTTP GET on the specified URL :post - Pefform an HTTP POST on the specified URL Defaults Property Default Value message {} status_codes [200] headers {} content_type application/json ssl_verify peer",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/camsa_http/",
    "relUrl": "/docs/cookbooks/camsa/libraries/camsa_http/"
  },
  "15": {
    "id": "15",
    "title": "chefserver_org",
    "content": "Resource to create an organisation in the CHef Server. It will check to see if the org already exists or not. Additionally when an org is created it will upload the name and the key to the config store. Syntax chefserver_org &#39;name&#39; do name String # Name of the organisation to create. If not specified the name of the resource will be used description String # Description of the organisation username String # Username to be associated with the organisation url String # URL to the instance azure functions action Symbol # Action to run on the resource, default: create end where: chefserver_org is the resource name is the name given to the resource block action identifies which steps the chef-client will take to bring the nodes into the desired state name, description, username and url are properties of this resource, with the ruby type shown. Actions The chefserver_org resource has the following actions: :create - Creates the organisation Defaults Property Default Value url node[&#39;camsa&#39;][&#39;azure_functions&#39;][&#39;camsa&#39;][&#39;url&#39;]",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/chefserver_org/",
    "relUrl": "/docs/cookbooks/camsa/libraries/chefserver_org/"
  },
  "16": {
    "id": "16",
    "title": "chefserver_user",
    "content": "Resource to create users on the Chef Server. Once a user has been created the username and the keys are uploaded to the configuration store. Syntax chefserver_user &#39;name&#39; do firstname String # Firstname of the user to create lastname String # Lastname of the user to create username String # Username if the new account. If not specified the name of the resource will be used password String # Password to be associated with the user emailaddress String # EMail address of the user url String # URL to the instance azure functions action Symbol # Action to run on the resource, default: create end where: chefserver_user is the resource name is the name given to the resource block action identifies which steps the chef-client will take to bring the nodes into the desired state firstname, lastname, username, password, emailaddress and url are properties of this resource, with the ruby type shown. Actions The chefserver_user resource has the following actions: :create - Creates the user Defaults Property Default Value url node[&#39;camsa&#39;][&#39;azure_functions&#39;][&#39;camsa&#39;][&#39;url&#39;]",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/chefserver_user/",
    "relUrl": "/docs/cookbooks/camsa/libraries/chefserver_user/"
  },
  "17": {
    "id": "17",
    "title": "Cookbooks",
    "content": "Cookbooks The setup system for CAMSA currently consists of one cookbook.",
    "url": "http://localhost:4000/docs/cookbooks/cookbooks/",
    "relUrl": "/docs/cookbooks/cookbooks/"
  },
  "18": {
    "id": "18",
    "title": "Resources",
    "content": "Resources Resources replaced definitions which were simple pieces of reusable code that can be used in recipes. They are not as complex as libraries (in this case).",
    "url": "http://localhost:4000/docs/cookbooks/camsa/resources/description/",
    "relUrl": "/docs/cookbooks/camsa/resources/description/"
  },
  "19": {
    "id": "19",
    "title": "Libraries",
    "content": "Libaries A number of libraries have been created which assist with the setup of the components. They have been built to ensure reusability as well as make the overall recipe easier to understand and manage.",
    "url": "http://localhost:4000/docs/cookbooks/camsa/libraries/description/",
    "relUrl": "/docs/cookbooks/camsa/libraries/description/"
  },
  "20": {
    "id": "20",
    "title": "Files",
    "content": "Files The cookbook contains a number of files that are written to the disk of the servers. These files are written out in their entirety, they are not templates.",
    "url": "http://localhost:4000/docs/cookbooks/camsa/files/description/",
    "relUrl": "/docs/cookbooks/camsa/files/description/"
  },
  "21": {
    "id": "21",
    "title": "Policy Files",
    "content": "Policy files Chef Policy files are used to create an Effortless Habitat package that is used to deploy the components required for CAMSA.",
    "url": "http://localhost:4000/docs/policyfiles/description/",
    "relUrl": "/docs/policyfiles/description/"
  },
  "22": {
    "id": "22",
    "title": "Templates",
    "content": "Templates As with the files in the cookbook there are a number of templates that are used to write out files with specific settings and configuration that come from the attributes in Chef run.",
    "url": "http://localhost:4000/docs/cookbooks/camsa/templates/description/",
    "relUrl": "/docs/cookbooks/camsa/templates/description/"
  },
  "23": {
    "id": "23",
    "title": "camsa",
    "content": "camsa This cookbooks is responsible for setting up all of the components in the managed application. It is able to configure the Automate and optionally Supermarket servers. It will configure the license and setup SSL certificates were appropriate. In order to facilitate the monitoring of the system it will also configure Log Analytics and alerts in order to help prevent downtime.",
    "url": "http://localhost:4000/docs/cookbooks/camsa/description/",
    "relUrl": "/docs/cookbooks/camsa/description/"
  },
  "24": {
    "id": "24",
    "title": "format_disk",
    "content": "format_disk This is a simple resource that groups other resources together to allow the formattign and mounting of disks. When CAMSA is deployed each machine has a data disk attached to it. This resource is used to partition the disk (the whole of the disk is used), format it and then mount it. Syntax format_disk &#39;name&#39; do device String # Name of the device, if not specified the name of the resource will be used label String # Label to be applied to the partition fstype String # The filesystem type mountpoint String # Mount point for the partition action Symbol # Action to run on the resource, default: create end where: format_disk is the resource name is the name given to the resource block action identifies which steps the chef-client will take to bring the nodes into the desired state device, label, fstype and mountpoint are properties of this resource, with the ruby type shown. Actions The format_disk resource has the following actions: :create - Create the parition and format the disk Defaults Property Default Value fstype ext4",
    "url": "http://localhost:4000/docs/cookbooks/camsa/resources/format_disk/",
    "relUrl": "/docs/cookbooks/camsa/resources/format_disk/"
  },
  "25": {
    "id": "25",
    "title": "Glossary of Terms",
    "content": "Glossary This page provides a table of the acronyms and terms that are used throughout this documentation. Where relevant web links have been provided to give more information. Term Description Link API Application Programming Interface   ARM Azure Resource Manager   CAMSA Chef Automate Managed Service for Azure   DNS Domain Name Server   FQDN Fully Qualified Domain Name   GDPR General Data Protection Regulation https://ec.europa.eu/commission/priorities/justice-and-fundamental-rights/data-protection/2018-reform-eu-data-protection-rules_en SSL Secure Sockets Layer  ",
    "url": "http://localhost:4000/docs/glossary",
    "relUrl": "/docs/glossary"
  },
  "26": {
    "id": "26",
    "title": "Overview",
    "content": "Overview The Chef Automate Managed Service for Azure (CAMSA) consists of 2 servers: Automate Server with integrated Chef Server Supermarket Server (optional) Each of these machines starts off as a vanilla Ubuntu machine deployed from the Azure Marketplace. Therefore each one needs to be configured to operate in its intended role. To achieve this the Chef Effortless pattern is used. The github.com/chef-partners/camsa-setup repository contains all of the cookbooks and Policy file definitions to create the Habitat packages for each server. Conventions There are a number of conventions in use in the cookbook. Convention Description _ If a recipe, library or resource is prefixed with an underscore _, then it is not intended to be called directly. It is a private resource that will be used by the other components in the cookbook",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "27": {
    "id": "27",
    "title": "Recipes",
    "content": "Recipes A number of recipes exist in the cookbook that are used to configure the components of CAMSA. backup Configure the backup script on the servers. It will write out the backup script to disk and then set it as a cronjob to be run each night. When the cronjob is added the type of backup is passed in, e.g. -t automate. This is determined based on the attributes that are set for node[&#39;camsa&#39;][&#39;deploy&#39;]. certificate Configures the SSL certificates for the Automate server. When the recipe is called the resource that is used will install the certbot command which is used to obtain ceritficates from Lets Encrypt. Warning: Currently it is not possible to set the certificates for the Chef Server if it is deployed separately to the Automate server clean In order to test the recipes and cookbooks correctly it is often necessary to remove any flag files are that are in /usr/local/camsa/flags. This recipe will remove all of these flags so that the recipes run as if they have not been run before. This recipe is in the Policy File run list and is controlled by the node[&#39;camsa&#39;][&#39;clean&#39;] attribute. Warning: This must not be used in production. It is intended to be used in development with Test Kitchen config_store Store machine information in the configuration store. For every machine that runs this recipe the following information will be uploaded: Internal IP Address FQDN assigned to the machine FQDN of the Public IP Address assigned to the machine datadisks Format and mount the data disk on the machine. Note: For the moment this only runs on machines where Automate is being deployed directories Create the directories for CAMSA as defined in the directories attributes. dns If the deployment is running as a managed application register the machine with the managedautomate.io DNS zone. The recipe calls the automate_dns resource which verifies the Azure subscription ID and Automate license and if they pass the server will be added to the DNS zone. install This recipe determines what to install based on the node[&#39;camsa&#39;][&#39;deploy&#39;] attribute. For the Chef and Automate servers the Automate package is installed from the acceptance channel (until it becomes stable). The chef server is installed using the --product switch to the chef-automate-ctl command. This recipe will also be responsible for installing the Chef supermarket, which is currently not being deployed yet. kernel Automate requires some specific kernel settings, this recipe sets these values on the server. license In order operate an Automate server it must ben licensed, either a trial or a full one. This recipe will determine if a full license has been supplied and apply it if it has. However if not a trial license will be obtained and applied to the instance. The license is made available to other recipes and resources through node.run_state. monitoring Configures the monitoring for the deployed components. Depending on what is being deployed (denoted by node[&#39;camsa][&#39;deploy&#39;]) the monitoring solution will be installed. For example if deploying Chef then Statsd will be installed and the necessary plugin written out. tokens Creates tokens in the Automate server for API access. Any tokens that are create are uploaded to the configuration store. As there is no way to detect if a token has already been created on the server, flag file is created in /usr/local/camsa/flags for the named token. If the file exist the resource will not be executed. user Create the specified user in the Chef and Automate servers. The user that was specified will be created in both components. With respect to the Chef server the organisation will also be created. whitelist In order to be able to log to the managed app Log Analytics the workspace and key need to be sought. As these are not embedded into the files in source control, they have to be obtained from the central functions. When the function is called, the subscription id and the Automate license are passed. If the subscription is whitelisted, e.g. permitted to log, the automate license will be verified. If this passes the function will return the Log Analytics workspace information.",
    "url": "http://localhost:4000/docs/cookbooks/camsa/recipes/",
    "relUrl": "/docs/cookbooks/camsa/recipes/"
  },
  "28": {
    "id": "28",
    "title": "server_setup",
    "content": "server_setup This is the main policy file for the setup of the Chef components in CAMSA. Dependencies There are a number of dependencies for the recipes in the cookbooks which are defined in the policy file. cookbook &#39;nodejs&#39;, &#39;~&gt; 6.0&#39;, :supermarket cookbook &#39;line&#39;, &#39;~&gt; 2.2.0&#39;, :supermarket cookbook &#39;filesystem&#39;, &#39;~&gt; 1.0.0&#39;, :supermarket Run list The recipes that are called by policy file are: run_list [ &#39;camsa::config_store&#39;, &#39;camsa::datadisks&#39;, &#39;camsa::directories&#39;, &#39;camsa::clean&#39;, &#39;camsa::kernel&#39;, &#39;camsa::install&#39;, &#39;camsa::license&#39;, &#39;camsa::tokens&#39;, &#39;camsa::user&#39;, &#39;camsa::whitelist&#39;, &#39;camsa::monitoring&#39;, &#39;camsa::backup&#39;, &#39;camsa::dns&#39;, &#39;camsa::certificate&#39;, ]",
    "url": "http://localhost:4000/docs/policyfiles/server_setup/",
    "relUrl": "/docs/policyfiles/server_setup/"
  },
  "29": {
    "id": "29",
    "title": "statsd_config.js",
    "content": "statsd_config.js Statsd requires a configuration file which contains the settings to be able to write out the files to Azure blob storage. This template file is written out to /usr/local/camsa/etc/statsd_config.js by default and is populated from the attributes that are in the chef run. Configuration As this is a template the settings for the file are injected directly into the script when Chef renders the file to disk. The following is a list of the settings that are applied to the script. Setting Description Example storageAccountName Name of the storage account   storageAccountKey Key to use when accessing the storage account   queueName Name of the queue to put messages onto   plugin The name of the plugins that need to be run by Statsd   Raw file The following is an example of the backup configuration template { storageAccountName: &quot;&lt;%= @sa_name %&gt;&quot;, storageAccountKey: &quot;&lt;%= @access_key %&gt;&quot;, queueName: &quot;chef-statsd&quot;, backends: [ &quot;&lt;%= @plugin %&gt;&quot; ] }",
    "url": "http://localhost:4000/docs/cookbooks/camsa/templates/stasd_config/",
    "relUrl": "/docs/cookbooks/camsa/templates/stasd_config/"
  },
  "30": {
    "id": "30",
    "title": "statsd-azure-queue.js",
    "content": "statsd-azure-queue.js The Chef server emits metrics in Statsd format. The deployment installs a Statsd server on the same machine as the Chef server component and configures Chef to send data to it. This file is a plugin for Stats that allows these messages to be sent to an Azure Queue. The messages are then read from the queue by an Azure Function that is deployed as part of CAMSA. Configuration As this is a plugin for Stats there are no parameters that can be passed to it directly, however it does need configuration which is set in the main statsd configuration file. The settings for this file are: Name Description storageAccountName Name of the storage account with the queue storageAccountKey Account key associated with the specified storage account queueName Name of the queue to send messages to",
    "url": "http://localhost:4000/docs/cookbooks/camsa/files/statsd-azure-queue/",
    "relUrl": "/docs/cookbooks/camsa/files/statsd-azure-queue/"
  },
  "31": {
    "id": "31",
    "title": "statsd.service",
    "content": "stats.service So that statsd can be started on boot using systemd a configuration file required. This template provides that file. This template file is written out to /etc/systemd/system/statsd.service by default and is populated from the attributes that are in the chef run. Configuration As this is a template the settings for the file are injected directly into the script when Chef renders the file to disk. The following is a list of the settings that are applied to the script. Setting Description Example user User under which the service should run   statsd_path Path to the statsd server   statsd_config_file Path to the statsd configuration file   Raw file The following is an example of the backup configuration template [Unit] Description=StatsD daemon for Chef Server monitoring [Service] User=&lt;%= @user %&gt; Type=simple ExecStart=/usr/bin/node &lt;%= @statsd_path %&gt; &lt;%= @statsd_config_file %&gt; [Install] WantedBy=multi-user.target",
    "url": "http://localhost:4000/docs/cookbooks/camsa/templates/statsd_service/",
    "relUrl": "/docs/cookbooks/camsa/templates/statsd_service/"
  }
  
}
